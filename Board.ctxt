#BlueJ class context
comment0.target=Board
comment0.text=\n\ The\ Board\ class\ models\ a\ 3\ by\ 3\ Tic-Tac-Toe\ board.\ \ There\ are\ methods\n\ for\ filling\ board\ positions\ with\ X\ or\ O\ symbols,\ checking\ for\ a\ winner,\n\ and\ inspecting\ the\ contents\ of\ the\ board.\n
comment1.params=
comment1.target=Board()
comment1.text=\n\ The\ no-argument\ constructor\ creates\ a\ new\ blank\ board,\ using\ the\n\ characters\ 'X',\ 'O',\ and\ '.'\ to\ represent\ X,\ O,\ and\ open\ spaces.\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\n\ The\ toString\ method\ returns\ a\ multi-line\ string\ that\ shows\ the\n\ current\ state\ of\ the\ board.\n\n\ @return\ A\ string\ representing\ the\ board\ state.\n
comment3.params=col\ row
comment3.target=boolean\ isOpen(int,\ int)
comment3.text=\n\ Inspects\ the\ board\ to\ see\ if\ the\ specified\ position\ is\ open.\n\n\ @param\ col\ \ Position's\ column\ value,\ zero-based.\n\ @param\ row\ \ Position's\ row\ value,\ zero-based.\n\ @return\ \ <code>true</code>\ if\ the\ position\ is\ open,\n\ <code>false</code>\ otherwise.\n
comment4.params=col\ row\ player
comment4.target=void\ fillPosition(int,\ int,\ int)
comment4.text=\n\ Fills\ a\ position\ on\ the\ board\ with\ the\ specified\ symbol\ (Board.X\n\ or\ Board.O).\ \ If\ the\ position\ is\ already\ filled,\ the\ method\ prints\n\ an\ error\ message\ and\ leaves\ the\ board\ unmodified.\n\n\ @param\ col\ \ Column\ of\ position\ to\ be\ filled,\ zero-based.\n\ @param\ row\ \ Row\ of\ position\ to\ be\ filled,\ zero-based.\n\ @param\ player\ \ One\ of\ the\ player\ constants\ defined\ by\ the\ Board\n\ class\ (Board.X\ or\ Board.O).\n
comment5.params=
comment5.target=boolean\ boardFilled()
comment5.text=\n\ This\ method\ returns\ true\ if\ all\ spots\ on\ the\ board\ are\ filled.\n\ Note\ that\ in\ the\ case\ of\ a\ draw,\ this\ method\ will\ return\ true\n\ even\ though\ <code>getWinner</code>\ will\ report\ that\ neither\n\ player\ has\ won.\n\n\ @return\ <code>true</code>\ if\ the\ board\ is\ completely\ filled,\n\ <code>false</code>\ otherwise.\n
comment6.params=c
comment6.target=boolean\ threeInARow(char)
comment6.text=\n\ The\ private\ method\ threeInARow\ returns\ true\ if\ three\ of\ the\ specified\n\ character\ are\ found\ in\ a\ line\ horizontally,\ vertically,\ or\ diagonally.\n
comment7.params=
comment7.target=int\ getWinner()
comment7.text=\n\ Checks\ to\ see\ if\ a\ player\ has\ won\ the\ game.\ \ If\ so,\ it\ returns\ the\n\ constant\ corresponding\ to\ the\ winning\ player\ (Board.X\ or\ Board.O),\n\ otherwise\ it\ returns\ -1.\n\n\ @return\ \ The\ constant\ corresponding\ to\ the\ winning\ player,\ if\ a\n\ player\ has\ won,\ or\ -1\ if\ neither\ player\ has\ won.\n
comment8.params=col\ row
comment8.target=int\ getContents(int,\ int)
comment8.text=\n\ This\ method\ returns\ the\ contents\ of\ the\ specified\ board\ position\n\ using\ one\ of\ the\ three\ constants\ defined\ by\ the\ Board\ class\n\ (Board.X,\ Board.O,\ or\ Board.BLANK).\n\n\ @param\ col\ \ Column\ of\ position\ to\ be\ inspected,\ zero-based.\n\ @param\ row\ \ Row\ of\ position\ to\ be\ inspected,\ zero-based.\n\ @return\ \ One\ of\ the\ three\ constants\ defined\ by\ the\ Board\ class.\n
comment9.params=
comment9.target=int\ getSize()
comment9.text=\n\ helper\ method\ that\ returns\ the\ size\ of\ the\ game\ board\n
numComments=10
